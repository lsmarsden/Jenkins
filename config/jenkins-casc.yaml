# See http://localhost:8080/configuration-as-code/reference for full list of options
jenkins:
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: ${JENKINS_ADMIN_ID}
          password: ${JENKINS_ADMIN_PASSWORD}
        - description: The default Jenkins user.
          id: ${JENKINS_USER_ID}
          password: ${JENKINS_USER_PASSWORD}
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "USER:Overall/Administer:${JENKINS_ADMIN_ID}"
        - "USER:Overall/Administer:${JENKINS_USER_ID}"
        - "GROUP:Overall/Read:authenticated"
security:
  scriptApproval:
    approvedSignatures:

  queueItemAuthenticator:
    # Run jobs as the triggering user. If no triggering user (e.g. started by timer), then
    # run as Jenkins user with run permissions.
    authenticators:
      - global:
          strategy: triggeringUsersAuthorizationStrategy
      - global:
          strategy:
            specificUsersAuthorizationStrategy:
              userid: ${JENKINS_USER_ID}
              password: ${JENKINS_USER_PASSWORD}
unclassified:
  location:
    url: http://localhost:8080/
jobs:
  # Initial Jenkins seed job - will be overwritten with the job of the same name in
  # the Github jenkins-jobs repo once run. If this job is not present in the repo and removeAction
  # is 'DELETE', then the job will abort automatically as it will try to delete itself.
  - script: |
      job('jenkins_seed_jobs') {
          triggers {
              cron('* * * * *')
          }
          scm {
              git {
                  remote {
                      github('lsmarsden/jenkins-jobs')
                  }
                  extensions {
                      cleanBeforeCheckout()
                  }
              }
          }
          steps {
              dsl {
                  external('jobs/*.groovy')
      
                  removeAction('DELETE')
              }
          }
      }
